 doc/script_commands.txt | 16 ++++++++++++++--
 src/map/clif.c          |  2 +-
 src/map/script.c        | 30 ++++++++++++++++++++----------
 src/map/status.c        | 49 ++++++++++++++++++++++++++++++++++++-------------
 src/map/status.h        |  2 +-
 5 files changed, 72 insertions(+), 27 deletions(-)

diff --git a/doc/script_commands.txt b/doc/script_commands.txt
index c3cc8a799..76d9bb50f 100644
--- a/doc/script_commands.txt
+++ b/doc/script_commands.txt
@@ -4414,6 +4414,10 @@ offline in the mean time, attachrid() returns false, otherwise true.
 
 *rid2name(<account id>)
 
+    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
+    @ /!\ This command is deprecated @
+    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
+
 Converts rid to name. Note: The player/monster/NPC must be online/enabled.
 Good for PCKillEvent where you can convert 'killedrid' to the name of the
 player.
@@ -4421,6 +4425,9 @@ player.
 Note: rid2name() may not produce correct character names since RID means
       account id.
       It will return the current online character of the account only.
+	  
+This command is deprecated and it should not be used in new scripts, as it is
+likely to be removed at a later time. Please use 'getunitname' instead.
 
 ---------------------------------------
 
@@ -10163,11 +10170,16 @@ returns -1 if value could not be retrieved.
 
 ---------------------------------------
 
-*getunitname(<GID>)
+*getunitname(<GID>{, <type>})
 
 Retrieve the name of a unit.
+Note: The player/monster/NPC must be online/enabled.
+Good for 'OnPCKillEvent:' where you can convert 'killedrid' to the name of the player.
+
+If type is 0(default), will return exact name display in game. Eg. '@fakename'
+If type is 1, will return actual name retrieve from database.
 
-returns "Unknown" if the value could not be retrieved.
+return "Unknown" if the value could not be retrieved.
 
 ---------------------------------------
 
diff --git a/src/map/clif.c b/src/map/clif.c
index 86b130e88..90231fe9d 100644
--- a/src/map/clif.c
+++ b/src/map/clif.c
@@ -20543,7 +20543,7 @@ static void clif_navigate_to(struct map_session_data *sd, const char *mapname, u
  */
 static const char *clif_get_bl_name(const struct block_list *bl)
 {
-	const char *name = status->get_name(bl);
+	const char *name = status->get_name(bl, false);
 
 	if (name == NULL)
 		return "Unknown";
diff --git a/src/map/script.c b/src/map/script.c
index 7e6e06376..aa9be27d0 100644
--- a/src/map/script.c
+++ b/src/map/script.c
@@ -20171,27 +20171,37 @@ static BUILDIN(getunitdata)
 
 /**
  * Gets the name of a Unit.
- * Supported types are [MOB|HOM|PET|NPC].
- * MER and ELEM don't support custom names.
+ * Supported types are [PC|MOB|HOM|PET|NPC|MER|ELEM].
  *
  * @command getunitname <GUID>;
- * @param GUID Game Object Unique ID.
- * @return boolean or Name of the game object.
+ * @param GID Game Object Unique ID.
+ *   type 0 = actual name shows in client
+ *   type 1 = name retrieve from database
+ * @return the Name of the game object ID.
  */
 static BUILDIN(getunitname)
 {
-	const struct block_list* bl = NULL;
-
-	bl = map->id2bl(script_getnum(st, 2));
+	int gid = script_getnum(st, 2);
+	const struct block_list *bl = map->id2bl(gid);
+	int type = 0;
 
 	if (bl == NULL) {
-		ShowWarning("buildin_getunitname: Error in finding object with given game ID %d!\n", script_getnum(st, 2));
+		ShowWarning("buildin_getunitname: Error in finding object GID '%d'!\n", gid);
 		script_pushconststr(st, "Unknown");
 		return false;
 	}
 
-	script_pushstrcopy(st, status->get_name(bl));
+	if (script_hasdata(st, 3))
+		type = (script_getnum(st, 3) > 0)? 1 : 0;
+
+	const char *name = status->get_name(bl, type);
+	if (name == NULL) {
+		ShowWarning("buildin_getunitname: Error in finding object GID '%d'!\n", gid);
+		script_pushconststr(st, "Unknown");
+		return false;
+	}
 
+	script_pushstrcopy(st, name);
 	return true;
 }
 
@@ -25581,7 +25591,7 @@ static void script_parse_builtin(void)
 		/* Unit Data */
 		BUILDIN_DEF(setunitdata,"iiv??"),
 		BUILDIN_DEF(getunitdata,"ii?"),
-		BUILDIN_DEF(getunitname,"i"),
+		BUILDIN_DEF(getunitname,"i?"),
 		BUILDIN_DEF(setunitname,"is"),
 		BUILDIN_DEF(unitwalk,"ii?"),
 		BUILDIN_DEF(unitkill,"i"),
diff --git a/src/map/status.c b/src/map/status.c
index f06bb0330..c913ebfc8 100644
--- a/src/map/status.c
+++ b/src/map/status.c
@@ -6516,23 +6516,46 @@ static uint32 status_calc_mode(const struct block_list *bl, const struct status_
  * Returns the name of the given bl.
  *
  * @param bl The requested bl.
+ * @actual_name
+ *   type 0 = actual name shown in the client
+ *   type 1 = name retrieve from database
  * @return The bl's name or NULL if not available.
  */
-static const char *status_get_name(const struct block_list *bl)
+static const char *status_get_name(const struct block_list *bl, bool actual_name)
 {
 	nullpo_ret(bl);
-	switch (bl->type) {
-		case BL_PC:
-		{
-			const struct map_session_data *sd = BL_UCCAST(BL_PC, bl);
-			if (sd->fakename[0] != '\0')
-				return sd->fakename;
-			return sd->status.name;
-		}
-		case BL_MOB: return BL_UCCAST(BL_MOB, bl)->name;
-		case BL_PET: return BL_UCCAST(BL_PET, bl)->pet.name;
-		case BL_HOM: return BL_UCCAST(BL_HOM, bl)->homunculus.name;
-		case BL_NPC: return BL_UCCAST(BL_NPC, bl)->name;
+
+	if (actual_name) {
+		switch (bl->type) {
+			case BL_PC:   return BL_UCCAST(BL_PC, bl)->status.name;
+			case BL_NPC:  return BL_UCCAST(BL_NPC, bl)->name;
+			case BL_PET:  return BL_UCCAST(BL_PET, bl)->db->name;
+			case BL_MOB:  return BL_UCCAST(BL_MOB, bl)->db->name;
+			case BL_HOM: 
+				int i = homun->db_search(BL_UCCAST(BL_HOM, bl)->homunculus.class_, HOMUNCULUS_CLASS);
+				if (i == INDEX_NOT_FOUND)
+					return NULL;
+				return homun->dbs->db[i].name;
+			case BL_MER:  return BL_UCCAST(BL_MER, bl)->db->name;
+			case BL_ELEM: return BL_UCCAST(BL_ELEM, bl)->db->name;
+				
+		}
+	}
+	else {
+		switch (bl->type) {
+			case BL_PC:
+				const struct map_session_data *sd = BL_UCCAST(BL_PC, bl);
+				if (sd->fakename[0] != '\0')
+					return sd->fakename;
+				return sd->status.name;
+			case BL_NPC: return BL_UCCAST(BL_NPC, bl)->name;
+			case BL_PET: return BL_UCCAST(BL_PET, bl)->pet.name;
+			case BL_MOB: return BL_UCCAST(BL_MOB, bl)->name;
+			case BL_HOM: return BL_UCCAST(BL_HOM, bl)->homunculus.name;
+			// Mercenary and Elementals only has database name
+			case BL_MER:  return BL_UCCAST(BL_MER, bl)->db->name;
+			case BL_ELEM: return BL_UCCAST(BL_ELEM, bl)->db->name;
+		}
 	}
 	return NULL;
 }
diff --git a/src/map/status.h b/src/map/status.h
index 17af22703..bf84b1fd7 100644
--- a/src/map/status.h
+++ b/src/map/status.h
@@ -2327,7 +2327,7 @@ struct status_interface {
 	struct regen_data * (*get_regen_data) (struct block_list *bl);
 	struct status_data * (*get_status_data) (struct block_list *bl);
 	struct status_data * (*get_base_status) (struct block_list *bl);
-	const char *(*get_name) (const struct block_list *bl);
+	const char *(*get_name) (const struct block_list *bl, bool actual_name);
 	int (*get_class) (const struct block_list *bl);
 	int (*get_lv) (const struct block_list *bl);
 	defType (*get_def) (struct block_list *bl);
